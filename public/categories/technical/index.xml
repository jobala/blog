<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical on Japheth Obala</title>
    <link>http://localhost:1313/categories/technical/</link>
    <description>Recent content in Technical on Japheth Obala</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Mar 2024 14:22:09 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/technical/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Profiling In Go</title>
      <link>http://localhost:1313/posts/technical/profiling-go/</link>
      <pubDate>Sun, 10 Mar 2024 14:22:09 +0300</pubDate>
      <guid>http://localhost:1313/posts/technical/profiling-go/</guid>
      <description>&lt;p&gt;It is possible to write slow programs despite increasingly powerful computers and profiling helps you identify slow sections of your program.&lt;/p&gt;&#xA;&lt;p&gt;Assuming we have two functions that calculate the square of their index and adds the result to a slice, how do we know which is faster ?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;CalculateSquares&lt;/span&gt;(n &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;squares &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;, n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;squares[i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;] = i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt; i&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; squares&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;CalculateSquaresMath&lt;/span&gt;(n &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;squares &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;, n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;squares[i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#0086b3&#34;&gt;int&lt;/span&gt;(math.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Pow&lt;/span&gt;(&lt;span style=&#34;color:#0086b3&#34;&gt;float64&lt;/span&gt;(i), &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; squares&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use benchmarking to know which of the two is faster.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Functional Options</title>
      <link>http://localhost:1313/posts/technical/functional-options/</link>
      <pubDate>Thu, 28 Dec 2023 10:12:42 +0300</pubDate>
      <guid>http://localhost:1313/posts/technical/functional-options/</guid>
      <description>&lt;p&gt;The functional options pattern is a mechanism for providing flexible configuration to a Go library and in this article I will be exploring how it is implemented in &lt;a href=&#34;github.com/uptrace/uptrace-go&#34;&gt;uptrace-go&lt;/a&gt;. There are other less flexible techniques for achieving the same goal like config structs and positional arguments which I won&amp;rsquo;t cover but are good to know.&lt;/p&gt;&#xA;&lt;p&gt;As you can tell from the title, functions are central to the implementation of this pattern and in &lt;a href=&#34;github.com/uptrace/uptrace-go&#34;&gt;uptrace-go&lt;/a&gt; it all starts with the &lt;code&gt;option&lt;/code&gt; function type. Any function that matches the signature &lt;code&gt;func(config *config)&lt;/code&gt; is of type &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
