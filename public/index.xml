<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Japheth Obala</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Japheth Obala</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Sep 2024 12:19:30 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ORMs Considered Harmful</title>
      <link>http://localhost:1313/posts/technical/harmful-orms/</link>
      <pubDate>Mon, 09 Sep 2024 12:19:30 +0300</pubDate>
      <guid>http://localhost:1313/posts/technical/harmful-orms/</guid>
      <description>&lt;p&gt;Alright, the title is a click bait and ORMs are not harmful. With that out of the way,  I am going to make a case against ORMs and perhaps persuade you to write your own SQL instead. I have worked in teams where the use of ORMs was a default, unquestioned choice and  I don&amp;rsquo;t think they served us well in the long run.&lt;/p&gt;&#xA;&lt;p&gt;To be fair, ORMs help you move fast in the early stages of development but as the product matures and activity on the system increases ORMs begin to show their ugly side because queries that worked fine before are now slow and need to be optimised. For example, here is an actual case I encountered. A seemingly simple ORM query resulted in a SQL statement that joined six tables, included unused columns and took several seconds to execute &amp;ndash; far too long for a real-time system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Slow Is Smooth, Smooth Is Fast</title>
      <link>http://localhost:1313/posts/reflections/slow-smooth-fast/</link>
      <pubDate>Sun, 01 Sep 2024 12:11:09 +0300</pubDate>
      <guid>http://localhost:1313/posts/reflections/slow-smooth-fast/</guid>
      <description>&lt;p&gt;Move fast and break things was popularized by Facebook and many startups followed suit to their own detriment because when you break things you have to fix them. The piper always has to get paid and when you don&amp;rsquo;t have Facebook&amp;rsquo;s resources at your disposal, the cost of fixing broken things is an existential threat. Which is why at Quill Dev Tools we focus on building things right the first time even though the progress feels slow because we believe slow is smooth and smooth is fast.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Computer From Scratch</title>
      <link>http://localhost:1313/posts/technical/nand2tetris/</link>
      <pubDate>Sun, 25 Aug 2024 10:30:36 +0300</pubDate>
      <guid>http://localhost:1313/posts/technical/nand2tetris/</guid>
      <description>&lt;p&gt;Around three months ago I embarked on a journey through the &lt;strong&gt;nand2Tetris&lt;/strong&gt; book to build a computer from scratch. This will be the third time I am attempting the journey after having lost interest midway twice. I decided to &amp;ldquo;physically&amp;rdquo; build the circuits so as to keep myself motivated. Seeing your creation coming to life has funny away of keeping you going. My goal was to understand the spirit of the device that I spend so much of my time on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ideal Editor</title>
      <link>http://localhost:1313/posts/reflections/ideal-editor/</link>
      <pubDate>Sun, 25 Aug 2024 09:40:12 +0300</pubDate>
      <guid>http://localhost:1313/posts/reflections/ideal-editor/</guid>
      <description>&lt;p&gt;I spend a lot of time editing text and I have used different text editors over the years. I started off on Sublime Text then I was introduced to Vim by a friend and it didn&amp;rsquo;t quite stick then and it didn&amp;rsquo;t help that I didn&amp;rsquo;t know how to touch type. I spent time in the Jetbrain gulag even buying multiple licenses for different IDEs, then came VS Code and back to Vim. I primarily use Vim now because it&amp;rsquo;s UI is minimal and helps me stay focused but I am not a Vim purist and there are things that I like from other editors I wish Vim had.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intellectual Life</title>
      <link>http://localhost:1313/posts/reflections/intellectual-life/</link>
      <pubDate>Sun, 09 Jun 2024 19:04:09 +0300</pubDate>
      <guid>http://localhost:1313/posts/reflections/intellectual-life/</guid>
      <description>&lt;p&gt;The word &amp;ldquo;vocation&amp;rdquo; is derived from the Latin word &amp;ldquo;vocare,&amp;rdquo; meaning &amp;ldquo;to call.&amp;rdquo; Among the various paths individuals are summoned to follow, the calling to an intellectual life stands out as a pursuit of knowledge and understanding through continuous and methodical effort. This article explores the significance and challenges of dedicating oneself to an intellectual life, emphasizing the disciplined study and sharing of knowledge.&lt;/p&gt;&#xA;&lt;p&gt;Few endeavors are as fulfilling as contributing to humanity&amp;rsquo;s progress through intellectual inquiry. Great thinkers like Einstein, Newton, and Curie dedicated their lives to uncovering fundamental truths, demonstrating that intellectual work is a powerful force for advancing human understanding. For those naturally inclined towards study and learning, this vocation offers the opportunity to play a part in guiding others towards first principles.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Philosophy</title>
      <link>http://localhost:1313/posts/philosophy/what-is-philosophy/</link>
      <pubDate>Sun, 10 Mar 2024 14:58:53 +0300</pubDate>
      <guid>http://localhost:1313/posts/philosophy/what-is-philosophy/</guid>
      <description>&lt;p&gt;My exposure to philosophy was much like the beginning of a good discovery, accidental, and I have become enamoured by it.&#xA;My enthusiasm for philosophy far outweighs my acquitance with it and I might write things that you disagree with but that&#xA;is fine. i am writing for myself, to look back and see how far I have come in my understanding and practise of philosophy.&lt;/p&gt;&#xA;&lt;p&gt;There isn&amp;rsquo;t a better well to quench the thirst of philosophy than that of Socrates and that&amp;rsquo;s where I went to start. Very&#xA;quickly it became clear to me that philosophy and faith are joined at the hip and Socrates appeared to me to be more than a&#xA;philosopher but also a mystic and prophet. Ironically, he was found guilty and executed for impiety.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Profiling In Go</title>
      <link>http://localhost:1313/posts/technical/profiling-go/</link>
      <pubDate>Sun, 10 Mar 2024 14:22:09 +0300</pubDate>
      <guid>http://localhost:1313/posts/technical/profiling-go/</guid>
      <description>&lt;p&gt;It is possible to write slow programs despite increasingly powerful computers and profiling helps you identify slow sections of your program.&lt;/p&gt;&#xA;&lt;p&gt;Assuming we have two functions that calculate the square of their index and adds the result to a slice, how do we know which is faster ?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;CalculateSquares&lt;/span&gt;(n &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;squares &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;, n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;squares[i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;] = i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt; i&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; squares&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;CalculateSquaresMath&lt;/span&gt;(n &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;squares &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;, n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;squares[i&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#0086b3&#34;&gt;int&lt;/span&gt;(math.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Pow&lt;/span&gt;(&lt;span style=&#34;color:#0086b3&#34;&gt;float64&lt;/span&gt;(i), &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; squares&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use benchmarking to know which of the two is faster.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Functional Options</title>
      <link>http://localhost:1313/posts/technical/functional-options/</link>
      <pubDate>Thu, 28 Dec 2023 10:12:42 +0300</pubDate>
      <guid>http://localhost:1313/posts/technical/functional-options/</guid>
      <description>&lt;p&gt;The functional options pattern is a mechanism for providing flexible configuration to a Go library and in this article I will be exploring how it is implemented in &lt;a href=&#34;github.com/uptrace/uptrace-go&#34;&gt;uptrace-go&lt;/a&gt;. There are other less flexible techniques for achieving the same goal like config structs and positional arguments which I won&amp;rsquo;t cover but are good to know.&lt;/p&gt;&#xA;&lt;p&gt;As you can tell from the title, functions are central to the implementation of this pattern and in &lt;a href=&#34;github.com/uptrace/uptrace-go&#34;&gt;uptrace-go&lt;/a&gt; it all starts with the &lt;code&gt;option&lt;/code&gt; function type. Any function that matches the signature &lt;code&gt;func(config *config)&lt;/code&gt; is of type &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Embedded Github Snippets</title>
      <link>http://localhost:1313/posts/technical/embedded-gh-snippets/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/technical/embedded-gh-snippets/</guid>
      <description>&lt;p&gt;I wanted to make adding snippets to my articles effortless instead of copy pasting, maintaining different versions of&#xA;the same thing or worse screenshoting snippets.&#xA;&lt;a href=&#34;https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists&#34;&gt;Gists&lt;/a&gt;&#xA;don&amp;rsquo;t cut it and their styling wouldn&amp;rsquo;t have felt native to my blog so I decided to rollout my own solution.&lt;/p&gt;&#xA;&lt;p&gt;I wanted an experience similar to&#xA;&lt;a href=&#34;https://github.blog/2017-08-15-introducing-embedded-code-snippets/&#34;&gt;Github Embedded Snippets&lt;/a&gt;, where I could paste a&#xA;&lt;a href=&#34;https://github.com/jobala/picasso/blob/4c195969620aee03742f9283c0a08d4b5a123b0d/scheduler/schedule.go#L10-L20&#34;&gt;permalink&lt;/a&gt;&#xA;and the snippet gets rendered. For example putting &lt;code&gt;&amp;lt;permalink&amp;gt;&lt;/code&gt; in an article should render the snippet below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Concurrency 101</title>
      <link>http://localhost:1313/posts/technical/go-concurrency-101/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/technical/go-concurrency-101/</guid>
      <description>&lt;h2 id=&#34;goroutines&#34;&gt;Goroutines&lt;/h2&gt;&#xA;&lt;p&gt;Goroutines enable concurrent behaviour in Go programs. To make a function concurrent &amp;ndash; non blocking &amp;ndash; simply place the&#xA;go keyword before the function invocation.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;helloWorld&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fmt.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// invoke the function concurrently&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;helloWorld&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;channels&#34;&gt;Channels&lt;/h2&gt;&#xA;&lt;p&gt;Goroutines use channels to communicate. The type of data a channel can transfer is determined at channel creation time.&#xA;The snippet below creates an integer channel &lt;code&gt;telephoneLine&lt;/code&gt; and passes the channel to the &lt;code&gt;neighbour&lt;/code&gt; goroutine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>From Javascript To Typescript</title>
      <link>http://localhost:1313/posts/technical/js-to-ts/</link>
      <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/technical/js-to-ts/</guid>
      <description>&lt;p&gt;The advantages of Typescript over Javascript are obvious and little convincing is required to persuade a team to migrate&#xA;from Javascript to Typescript. For historical reasons &lt;a href=&#34;github.com/netlify/build&#34;&gt;netlify/build&lt;/a&gt; was in Javascript and we&#xA;decided to migrate it to Typescript in an effort to improve developer experience.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;github.com/netlify/build&#34;&gt;netlify/build&lt;/a&gt; is an opensource monorepo and receives frequent contributions. This&#xA;constrained us from performing a big bang migration which has the risk of large merge conflicts. The migration had to be&#xA;transparent, making it possible for devs to add changes without noticing that the underlying tooling was changing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Commando Cli Framework</title>
      <link>http://localhost:1313/posts/technical/commando/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/technical/commando/</guid>
      <description>&lt;p&gt;I spent the better part of 2021 working msgraph-cli and I learnt a lot despite  a change in strategy that meant me working on something else. &lt;a href=&#34;https://github.com/jobala/commando&#34;&gt;Commando&lt;/a&gt; is a crystallisation of the lessons I learnt.&lt;/p&gt;&#xA;&lt;h2 id=&#34;declarative-command-grouping&#34;&gt;Declarative Command Grouping&lt;/h2&gt;&#xA;&lt;p&gt;Commando&amp;rsquo;s approach to command grouping is heavily influenced by the fact that CLIs like SDKs are wrappers for HTTP APIs. Therefore, I wanted a one-to-one mapping between an api url and command group definition. This led me to a declarative api for grouping commands. So, if a user wants to create the following command grouping in &lt;a href=&#34;https://github.com/jobala/commando&#34;&gt;Commando&lt;/a&gt;,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Open Closed Principle</title>
      <link>http://localhost:1313/posts/technical/open-closed/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/technical/open-closed/</guid>
      <description>&lt;p&gt;A system is rigid when a change in requirements leads to a cascade of changes in the software. The open closed principle is the antidote for rigid software designs, when implemented properly it makes the software system flexible. It is the principle you should know.&lt;/p&gt;&#xA;&lt;p&gt;The principle states that software entities &amp;ndash; modules, classes, functions &amp;ndash; should be open for extension but closed for modifications.&lt;/p&gt;&#xA;&lt;p&gt;For a module that conforms to this principle it should be possible to add new features without modifying the module&amp;rsquo;s source code or binaries. New features are added by adding new code and not by modifying existing working code. I know this is beginning to sound like a riddle, how can you add new features without modifying existing code?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Single Responsibility Principle</title>
      <link>http://localhost:1313/posts/technical/single-responsibility/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/technical/single-responsibility/</guid>
      <description>&lt;p&gt;Most people think that the single responsibility principle means that a module should do one thing. This is a common misunderstanding of the principle and leads to a fragmented codebase with thin classes, with one or two methods, littering the codebase as we can see in this &lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/150760/single-responsibility-principle-how-can-i-avoid-code-fragmentation&#34;&gt;StackOverflow question&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;While researching about the subject, I came across &lt;a href=&#34;https://www.yegor256.com/2017/12/19/srp-is-hoax.html&#34;&gt;SRP is a hoax&lt;/a&gt; which in my opinion embodies the misunderstanding of the single responsibility principle. The article shows the code below&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;Hey, I am Japheth. Welcome to my little corner of the wild wide web.&lt;/p&gt;&#xA;&lt;p&gt;This site serves the following purposes:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Share what I have learnt.&lt;/li&gt;&#xA;&lt;li&gt;Reflect because no learning happens without reflection.&lt;/li&gt;&#xA;&lt;li&gt;Creative outlet.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;I am interested in:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Developer Tools&lt;/li&gt;&#xA;&lt;li&gt;SDKs&lt;/li&gt;&#xA;&lt;li&gt;Build systems&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Other than that, I am a recovering self taught developer.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
